
%{
    #include <iostream>
    #include <map>
    #include <vector>
    #include <cstdlib>
    #include "class.hpp"
    #define YYDEBUG 1
    
    
    /* Global map for class declarations */
    std::map<char,Class> _class_table;
    
    /* Local variables within class */
    std::map <char, Variable> _class_local;
    
    /* Temporary map for each function and temporary map */
    std::map <char, Variable> _temp_local;

    /* Table that maps function name into all variables in that function */
    std::map <char, std::map<char,Variable> > _function_local;
    
    /* Functions requred by lex */
    extern int yylex();
    void yyerror(const char *message){
    
        fprintf(stderr, "%s", message);
    }
%}

%union {

    Expression* e;
    char c;
    Statement *stat;
    std::string *s;
    std::vector<char> *v;
    std::vector<Class_declaration*> *cd;
    std::vector<Statement*> *vstat;
    std::vector<Class*> *vc;
    Class *k;
}

/* List of tokens */
%token class_token  end_token 
%token <c> idclass_token id_token 
%token <s> void_token int_token double_token string_token public_token private_token
%token <s> const_int_token const_double_token const_string_token

/* List of types */
%type <e> Expression_rule
%type <stat> Declaration_rule Statement_rule
%type <s> Type_rule Encapsulation_rule
%type <v> Variable_array_rule 
%type <cd> Class_declaration_rule Declaration_array_rule
%type <vstat> Statement_array_rule
%type <k> Class_rule
%type <vc> Class_array_rule

/* Solving shift-reduce conflicts */
 %left '+'
 %nonassoc '(' ')'
 
%%

/* Memory: Everything is deleted automatically by OS */
Program: Class_array_rule end_token {

    /* Iterating through class array and performing type check on each class */
    auto b = $1 -> begin();
    auto e = $1 -> end();
    for(; b !=e; b++) {
    
        std::cout << std::endl;
        std::cout << " ---------------------- Class " << (*b)->get_name() << " ----------------------" << std::endl;
        if((*b)->typecheck() == true)
            std::cout << "Semantically correct." << std::endl;
        else
            std::cout << "Semantically incorrect." << std::endl;    
    }
    
    std::cout << std::endl;
    exit(EXIT_SUCCESS);
}
;

/* Memory: Reallocating pointers */
Class_array_rule: Class_array_rule Class_rule {

    /* Adding class to class vector */
    $$ = $1;
    $$->push_back($2);
}
| Class_rule {

    /* Creating empty vector and adding class */
    $$ = new std::vector<Class*>();
    $$->push_back($1);
}
;

/* Memory: Copying pointers, deleting vector */
Class_rule: class_token idclass_token '{' Declaration_array_rule '}' {

    /* Checking if a class with the same name already exists */
    if(_class_table.count($2)){
    
        std::cout << "Redeclaration of " << $2 << " class. \nSemantically incorrect." << std::endl;
        exit(EXIT_SUCCESS);
    }
    
    /* Otherwise adding the class to the global symbol table */
    $$ = new Class($2, *$4, _class_local, _function_local);
    _class_table[$2] = *$$;
    
    /* Clearing local maps */
    delete $4;
    _class_local.clear();
    _function_local.clear();
}
;

/* Memory: Reallocating pointers */
Declaration_array_rule: Declaration_array_rule Class_declaration_rule {

    /* Adding new declarations into Declaration_array_rule vector 
       (eg. private int a, b, c - adding these declaraions)
    */
    $$ = $1;
    
    auto b = $2 -> begin();
    auto e = $2 -> end();
    for(; b !=e; b++)
        $$->push_back(*b);
}
| Class_declaration_rule 
;

/* Memory: Deleting string tokens, array of variables */
Class_declaration_rule: Encapsulation_rule Type_rule Variable_array_rule ';' {

    /* Checking for variable redeclaration in specific class */
    bool succeed = true;
    for(char c : *$3){
        if(_class_local.count(c)){
            
            std::cout << std::endl;
            std::cout << *$1 << " " << *$2 << " " << std::string(1,c) << ":" << std::endl;
            std::cout << "> Redeclaration of variable " << std::string(1,c) << "." <<
            std::endl << "Semantically incorrect." << std::endl;
            succeed = false;
        }
    }
    
    /* If there was variable redeclaration, exiting program */
    if(!succeed) {
    
        std::cout << std::endl;
        exit(EXIT_SUCCESS);
    }
    
    /* Otherwise adding all variables into local class variables table */
    $$ = new std::vector<Class_declaration*>();    
    for(char c : *$3) {
        
        $$->push_back(new Variable_declaration(*$1, *$2, c));
        Variable v(c,*$2);
        _class_local[c] = v;
    }
    
    delete $1;
    delete $2;
    delete $3;
}
/* Memory: Deleting pointers, vector, redirecting pointers */
| Encapsulation_rule Type_rule id_token '(' ')' '{' Statement_array_rule '}' {

    /* Function recognition rule - just one of many class declarations */
    $$ = new std::vector<Class_declaration*>();
    $$->push_back(new Function_declaration(*$1, *$2, $3, *$7));
    
    /* Adding function into class table (function is a special case
       of class variable)
    */
    Variable v($3,*$2);
    _class_local[$3] = v;

    _function_local[$3]=  _temp_local;
    _temp_local.clear();

    delete $1;
    delete $2;
    delete $7;
    
}
;

/* Memory: Automatically deleted */
Encapsulation_rule: public_token
| private_token
;

/* Memory: Will be deleted higher in tree */
Type_rule: int_token 
| double_token 
| string_token
| idclass_token {

    $$ = new std::string(1,$1);
}
| void_token
;

/* Memory: Char vector will know to delete himself */
Variable_array_rule: id_token ',' Variable_array_rule {
    
    $$ = $3;
    $$->push_back($1);
}
| id_token {
    
    $$ = new std::vector<char>();
    $$->push_back($1);
}
;

/* Memory: Creating vector from existing statements */
Statement_array_rule: Statement_rule ';' Statement_array_rule {

        $$ = $3;
        $$->push_back($1);
}
| Statement_rule ';' {

    $$ = new std::vector<Statement*>();
    $$->push_back($1);
}
;

/* Memory: Redeclaration of pointers */
Statement_rule: Declaration_rule
| id_token '=' Expression_rule {

    
    $$ = new Assignment($3, $1);
}
| Expression_rule {
    
    $$ = new Expression_statement($1);
}
;

/* Memory: Only deleting type rule string, everything else know to delete itself */
Declaration_rule: Type_rule id_token {

    if(_temp_local.count($2)){
    
        std::cout << std::endl;
        std::cout << *$1 << " " << std::string(1,$2) << ":" << std::endl;
        std::cout << "> Redeclaration of variable " << std::string(1,$2) << "." << std::endl;
        exit(EXIT_SUCCESS);
    }

    $$ = new Declaration($2, *$1);
    Variable v($2,*$1);
    _temp_local[$2] = v;
    
    delete $1;
}
| Type_rule id_token '=' Expression_rule {
    
        if(_temp_local.count($2)){
    
            std::cout << std::endl;
            std::cout << *$1 << " " << std::string(1,$2) << ":" << std::endl;
            std::cout << "> Redeclaration of variable " << std::string(1,$2) << "." << std::endl;
            exit(EXIT_SUCCESS);
        }
        
        $$ = new Declaration_and_assigment(*$1, $4, $2);
        Variable v($2,*$1);
        _temp_local[$2] = v;
        
        delete $1;
}
;

/* Memory: Everything knows to delete itself */
Expression_rule: id_token {

    if(!_temp_local.count($1) && !_class_local.count($1))
        $$ = new Variable($1,"false");
    
    if(_temp_local.count($1))
        $$ = new Variable($1, _temp_local[$1].get_type());
    else
        $$ = new Variable($1, _class_local[$1].get_type());
}
| id_token '(' ')' {

    $$ = new Function_call($1);
}
| id_token '.' id_token {

    $$ = new Attribute_call($1,$3);
   
}
| id_token '.' id_token '(' ')' {

    $$ = new Method_call($1,$3);
}
| Expression_rule '+' Expression_rule {

    $$ = new Addition($1, $3);
}
| const_double_token {

    $$ = new Constant("double", *$1);
    delete $1;
}
| const_string_token {

    $$ = new Constant("string", *$1);
    delete $1;
}
| const_int_token {
    
    $$ = new Constant("int", *$1);
    delete $1;
}
;

%%

int main(){

    yyparse();
    return 0;
}
